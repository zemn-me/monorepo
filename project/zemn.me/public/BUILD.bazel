load("//bzl:rules.bzl", "bazel_lint")
load("//bzl/transcode_web:rules.bzl", "transcode_web")
load("//js:rules.bzl", "js_library")
load("//ts:rules.bzl", "ts_project")

package(default_visibility = ["//project/zemn.me:__subpackages__"])

# in future i can generate this from some aspect asset (that's like a
# partial of this file) I can generate from each asset.
# then i can collate them here.
#
# this would allow deps to import files instead of centralising them here.
genrule(
    name = "content_addressible_manifest",
    srcs = [
        ":kenwood_media_sources",
        ":kenwood_snow_video_sources",
        ":mist_on_the_hills_video_sources",
    ],
    outs = [
        "cas_manifest.txt",
        "cas",
    ],
    cmd = """
mkdir -p "$$(dirname $(location cas_manifest.txt))"
mkdir -p "$(location cas)"
$(execpath //rs/cmd/sha256) $(SRCS) > $(location cas_manifest.txt)

while read -r hash path; do
    cp "$$path" "$(location cas)/$$hash"
done < $(location cas_manifest.txt)
	""",
    tools = [
        "//rs/cmd/sha256",
    ],
)

genrule(
    name = "content_addressible_manifest_ts",
    srcs = ["cas_manifest.txt"],
    outs = ["manifest.ts"],
    cmd = """
    while read -r hash path; do
        short_path="$${path#*bazel-out/*/bin/}"
        var_name=$$(echo "$$short_path" | sed -E 's/[^a-zA-Z0-9]/_/g')
        echo "export const $${var_name} = \\"cas/$${hash}\\""
    done < $(location cas_manifest.txt) > $(location manifest.ts)
    """,
)

# This ends up in the bundle via //project/zemn.me/assets/kenwood:kenwood
# which is a ts_project that zemn.me depends on to render the video.
transcode_web(
    name = "kenwood_media_sources",
    src = "//project/zemn.me/assets/kenwood:kenwood.mp4",
    out_base_name = "kenwood",
)

transcode_web(
    name = "kenwood_snow_video_sources",
    src = "//video/2017/08/27:Clip109.mp4",
    out_base_name = "kenwood_snow",
)

transcode_web(
    name = "mist_on_the_hills_video_sources",
    src = "//video/2024/12/25:mist_on_the_hills.m4v",
    out_base_name = "mist_on_the_hills",
)

js_library(
    name = "files",
    srcs = [
        "wallpaper.jpg",
        "//project/zemn.me/public/poc",
    ],
)

ts_project(
    name = "kenwood",
    srcs = ["kenwood.ts"],
    assets = [
        "kenwood.mp4",
        "kenwood.webm",
        "kenwood.ogv",
        "kenwood.jpg",
    ],
    deps = [
        "//:base_defs",  # one day this should probably be separate for next.js
    ],
)

ts_project(
    name = "kenwood_snow",
    srcs = ["kenwood_snow.ts"],
    assets = [
        "kenwood_snow.mp4",
        "kenwood_snow.webm",
        "kenwood_snow.ogv",
        "kenwood_snow.jpg",
    ],
    deps = [
        "//:base_defs",  # one day this should probably be separate for next.js
    ],
)

ts_project(
    name = "mist_on_the_hills",
    srcs = ["mist_on_the_hills.ts"],
    assets = [
        "mist_on_the_hills.mp4",
        "mist_on_the_hills.webm",
        "mist_on_the_hills.ogv",
        "mist_on_the_hills.jpg",
    ],
    deps = [
        "//:base_defs",
    ],
)

bazel_lint(
    name = "bazel_lint",
    srcs = ["BUILD.bazel"],
)
