load("//py:rules.bzl", "py_library")

# Add rules here to build your software
# See https://docs.bazel.build/versions/master/build-ref.html#BUILD_files

# Allow any ts_library rules in this workspace to reference the config
# Note: if you move the tsconfig.json file to a subdirectory, you can add an alias() here instead
#   so that ts_library rules still use it by default.
#   See https://www.npmjs.com/package/@bazel/typescript#installation

load("@aspect_rules_py//py:defs.bzl", "py_venv")
load("@bazel_gazelle//:def.bzl", "gazelle", "gazelle_binary")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//:renovate/package_json.bzl", "bin")
load("@pip//:requirements.bzl", "all_whl_requirements")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python_gazelle_plugin//manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python_gazelle_plugin//modules_mapping:def.bzl", "modules_mapping")
load("//bzl:rules.bzl", "bazel_lint")
load("//bzl/binary_with_args:binary_with_args.bzl", "binary_with_args")
load("//go/cmd/version_sync:go_version_sync.bzl", "go_version_sync")
load("//js:rules.bzl", "copy_to_bin", "js_library")
load("//ts:rules.bzl", "ts_config")

package(default_visibility = [":__subpackages__"])

compile_pip_requirements(
    name = "requirements",
    src = "requirements.in",
    requirements_txt = "requirements.txt",
)

# implement fix api
alias(
    name = "requirements.test.fix",
    actual = "requirements.update",
)

# Useful commands to run!
alias(
    name = "fix",
    actual = "//bzl/fix_api:fix_all",
)

alias(
    name = "pnpm",
    # bazel run -- //:pnpm --dir $PWD
    actual = "//sh/bin:pnpm",
)

alias(
    name = "buildifier",
    actual = "@com_github_bazelbuild_buildtools//buildifier:buildifier",
)

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    deps = [],
)

js_library(
    name = "base_defs",
    srcs = ["Global.d.ts"],
)

exports_files(
    [
        "ruff.toml",
        ".prettierrc.json",
        "package.json",
        ".gitignore",
        ".editorconfig",
        "css_loader.d.ts",
        ".git",
        "jsconfig.json",
    ],
    visibility = ["//visibility:public"],
)

copy_to_bin(
    name = "swcrc",
    srcs = [".swcrc.json"],
    visibility = ["//visibility:public"],
)

copy_to_bin(
    name = "prettierrc",
    srcs = [".prettierrc.json"],
)

copy_to_bin(
    name = "gitignore",
    srcs = [".gitignore"],
)

copy_to_bin(
    name = "editorconfig",
    srcs = [".editorconfig"],
)

copy_to_bin(
    name = "package_json",
    srcs = ["package.json"],
)

bin.renovate_config_validator_test(
    name = "validate_renovate_config_test",
    args = ["$(location renovate.json)"],
    data = ["renovate.json"],
)

npm_link_all_packages(name = "node_modules")

go_version_sync(
    name = "go_version_sync",
)

js_library(
    name = "eslintrc",
    srcs = [
        ":eslint.config.js",
        "//:.gitignore",
        "//:editorconfig",
        "//:package_json",
        "//:prettierrc",
        "//:tsconfig",
    ],
    deps = [
        "//:node_modules/@eslint/compat",
        "//:node_modules/@eslint/js",
        "//:node_modules/@next/eslint-plugin-next",
        "//:node_modules/eslint-mdx",
        "//:node_modules/eslint-plugin-jest",
        "//:node_modules/eslint-plugin-mdx",
        "//:node_modules/eslint-plugin-react",
        "//:node_modules/eslint-plugin-react-hooks",
        "//:node_modules/eslint-plugin-simple-import-sort",
        "//:node_modules/typescript-eslint",
    ],
)

# This rule fetches the metadata for python packages we depend on. That data is
# required for the gazelle_python_manifest rule to update our manifest file.
modules_mapping(
    name = "modules_map",
    wheels = all_whl_requirements,
)

# gazelle:resolve py google.protobuf @com_google_protobuf//:protobuf_python
# gazelle:resolve py python.runfiles @rules_python//python/runfiles
# gazelle:map_kind py_binary py_binary //py:rules.bzl
# gazelle:map_kind py_library py_library //py:rules.bzl
# gazelle:map_kind py_test py_test //py:rules.bzl
# Gazelle python extension needs a manifest file mapping from
# an import to the installed package that provides it.
# This macro produces two targets:
# - //:gazelle_python_manifest.update can be used with `bazel run`
#   to recalculate the manifest
# - //:gazelle_python_manifest.test is a test target ensuring that
#   the manifest doesn't need to be updated
gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_map",
    # This is what we called our `pip_parse` rule, where third-party
    # python libraries are loaded in BUILD files.
    pip_repository_name = "pip",
    # This should point to wherever we declare our python dependencies
    # (the same as what we passed to the modules_mapping rule in WORKSPACE)
    # This argument is optional. If provided, the `.test` target is very
    # fast because it just has to check an integrity field. If not provided,
    # the integrity field is not added to the manifest which can help avoid
    # merge conflicts in large repos.
    requirements = "//:requirements.txt",
)

# this alias allows the gazelle python manifest fixer to conform to
# the fix api (bzl/fix_api).
alias(
    name = "gazelle_python_manifest.test.fix",
    actual = "gazelle_python_manifest.update",
)

gazelle_binary(
    name = "gazelle_bin",
    languages = [
        "@rules_python_gazelle_plugin//python",
        "@bazel_gazelle//language/go",  # Built-in rule from gazelle for Golang.
        "@bazel_gazelle//language/proto",  # Built-in rule from gazelle for Protos.
        "//go/gazelle/bazel",
        "//go/gazelle/ts/config",
        "//go/gazelle/js",
        "//go/gazelle/venv",
        # Any languages that depend on Gazelle's proto plugin must come after it.
    ],
    visibility = ["//visibility:public"],
)

# gazelle:prefix github.com/zemn-me/monorepo
# gazelle:map_kind go_binary go_binary //go:rules.bzl
# gazelle:map_kind go_library go_library //go:rules.bzl
# gazelle:map_kind ts_project ts_project //ts:rules.bzl
# gazelle:resolve proto go google/protobuf/struct.proto @com_github_golang_protobuf//ptypes/struct:struct

gazelle(
    name = "gazelle",
    command = "fix",
    gazelle = ":gazelle_bin",
)

bazel_lint(
    name = "bazel_lint",
    srcs = [
        "BUILD.bazel",
        "MODULE.bazel",
    ],
)

# gazelle:python_default_visibility //:__subpackages__
# gazelle:exclude .venv
py_venv(
    name = "venv",
    deps = [
        "//bzl/versioning",
        "//ini/git/merge_drivers/bazel_lockfile",
        "//project/cultist/gen/testing",
        "//py",
        "//py/ci/postUpgrade:postUpgrade_bin",
        "//py/copy_to_workspace:copy_to_workspace_bin",
        "//py/devtools",
        "//py/devtools/prep",
        "//py/devtools/prep:prep_bin",
        "//py/hello_world:hello_world_bin",
        "//py/ibazel:ibazel_bin",
        "//py/ipynb",
        "//py/ipynb:ipynb_bin",
        "//py/time/hemisphere:hemisphere_bin",
        "//ts/pulumi/lib/oci/example/python:python_bin",
    ],
)

# gazelle:exclude third_party

alias(
    name = "go",
    actual = "//sh/bin:go",
)

# gazelle:python_root

py_library(
    name = "monorepo",
    srcs = ["__init__.py"],
    visibility = ["//:__subpackages__"],
)

binary_with_args(
    name = "pnpm_lockfile_validation_bin",
    args = [
        "i",
        #        "--lockfile-only", # https://github.com/pnpm/pnpm/issues/6962#issuecomment-2985146457
        "--frozen-lockfile",
    ],
    binary = "@pnpm",
    data = [
        "package.json",
        "pnpm-lock.yaml",
    ],
    tags = ["no-sandbox"],
    test = True,
)
